version: '3.8'

networks:
  {{ cookiecutter.project_name }}_net:
    name: {{ cookiecutter.project_name }}_net
    driver: bridge

services:
  backend:
    image: {{cookiecutter.docker_image_backend}}:${ENVIRONMENT:-production}
    build: ./backend
    container_name: {{cookiecutter.docker_image_backend}}
    restart: unless-stopped
    ports:
      - "${PORT}:5000"
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    volumes:
      - ./backend:/backend
    {%- if cookiecutter.use_db == "yes" %}
    depends_on:
      - postgres
    {%- endif %}
    command: >
      bash -c "gunicorn 
      --bind ${HOST:-0.0.0.0}:5000 
      --workers ${GUNICORN_WORKERS:-2} 
      --threads ${GUNICORN_THREADS:-4} 
      --timeout ${GUNICORN_TIMEOUT:-60} 
      --graceful-timeout ${GUNICORN_GRACEFUL_TIMEOUT:-30} 
      --max-requests ${GUNICORN_MAX_REQUESTS:-1000} 
      --max-requests-jitter ${GUNICORN_MAX_REQUESTS_JITTER:-50} 
      --access-logfile ./logs/gunicorn-access.log 
      --error-logfile ./logs/gunicorn-error.log 
      app:app"
    networks:
      - {{ cookiecutter.project_name }}_net

{%- if cookiecutter.use_db == "yes" %}

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_EXTERNAL_PORT}:5432"
    volumes:
        - postgres_data:/var/lib/postgresql/data
    networks:
      - {{ cookiecutter.project_name }}_net

volumes:
  postgres_data:

{%- endif %}